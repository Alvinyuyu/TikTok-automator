Metadata-Version: 2.1
Name: pydub-stubs
Version: 0.24.1.9
Summary: Stub-only package containing type information for pydub
Home-page: https://github.com/SeparateRecords/pydub-stubs
License: ISC
Keywords: pydub,typing,stubs
Author: SeparateRecords
Author-email: me@rob.ac
Requires-Python: >=3.8,<4.0
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved
Classifier: License :: OSI Approved :: ISC License (ISCL)
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Software Development
Classifier: Typing :: Typed
Project-URL: Repository, https://github.com/SeparateRecords/pydub-stubs
Description-Content-Type: text/markdown

# pydub-stubs

Pydub version: **0.24.1**

**`pydub-stubs` provides type information for Pydub.**<br>
Only the public interface is guaranteed to be typed.

```
pip install pydub-stubs
```

<br>

## Aniticipated Questions

### Q: Why is <code>AudioSegment.<i>some_effect(...)</i></code> missing?

**TL;DR:** Import it as a function from `pydub.effects`.

Pydub dynamically adds certain functions to `AudioSegment` at runtime.
This is easy to type, but impossible to be 100% safe about.

A great example of why this can is difficult is `pydub.scipy_effects`,
which registers two effects that are named identically to those in
`pydub.effects`, but have different signatures. Importing this module
will override the previous effects, so now the signatures are wrong.

### Q: What's that version number?

`major.minor.patch.stubs`, where major/minor/patch are the latest
supported Pydub version. The stubs version being last means pinning
to a specific Pydub version will always get the latest stubs available.

### Q: What is `Metadata` and `PartialMetadata`?

These are dictionaries that were originally used when creating an
AudioSegment. `Metadata` and `PartialMetadata` do not exist at runtime.
Using these is no longer recommended, but they're still supported and
used internally. You can use the `channels`, `frame_rate`, and
`sample_rate` keyword arguments.

<br>

## Changelog

### Version 0.24.1.9

* **Add undocumented parameter of `AudioSegment.from_file`**<br>
  `read_ahead_limit` is absent from the documentation but a supported
  keyword argument.

<details>
<summary>Previous versions</summary>

### Version 0.24.1.8

* **Export other modules**<br>
  Adds exports for effects, exceptions, generators, playback, and
  scipy_effects

### Version 0.24.1.7

* **Add `AudioSegment._spawn` (again)**<br>
  This was accidentally removed in an earlier version.

* **Improve `pydub.effects.invert_phase`**<br>
  This is technically less accurate as `(0, 0)` is equivalent
  to `(0, 1)`.

### Version 0.24.1.6

* **Remove testing symbols from `pydub.audio_segment`**<br>

### Version 0.24.1.5

* **Fix `AudioSegment.export`**<br>
  First param is named `out_f` and isn't required.

### Version 0.24.1.4

* **Improved signature of `AudioSegment.from_file`**<br>
  The keyword arguments for raw/PCM audio don't require `format` to be
  set to either `raw` or `pcm`.

* **Fix package exports**<br>
  Exports `AudioSegment` from `__init__.py`.

### Version 0.24.1.3

* **Fixed overloads of `AudioSegment.fade`**<br>
  Exactly two of `start`, `end`, and `duration` must be given.

### Version 0.24.1.2

* **Improved `AudioSegment.fade`**<br>
  Changed to use overloads to prevent invalid method calls.

* **Improved `AudioSegment.from_mono_audiosegments`**<br>
  Use a positional-only parameter to ensure there's at least 1 argument.

### Version 0.24.1.1

* **Fixed `AudioSegment.__init__`**<br>
  Use overloads to model correct parameters.

* **Fixed `AudioSegment._spawn`**<br>
  Parameter `overrides` accepts a partial dictionary.

* **Fixed `pydub.scipy_effects.high_pass_filter`**<br>
  Parameter `order` should be `int`, not `float`.

### Version 0.24.1.0

Released

</details>

